// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiNikeContext))]
    partial class ApiNikeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<int>("FkIdClient")
                        .HasColumnType("int")
                        .HasColumnName("fkIdClient");

                    b.Property<int>("FkIdPaymentType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdPaymentType");

                    b.Property<int>("FkIdStatus")
                        .HasColumnType("int")
                        .HasColumnName("fkIdStatus");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdClient" }, "FK_orderClient");

                    b.HasIndex(new[] { "FkIdPaymentType" }, "FK_orderPayType");

                    b.HasIndex(new[] { "FkIdStatus" }, "FK_orderStatus");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Orderdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdOrder")
                        .HasColumnType("int")
                        .HasColumnName("fkIdOrder");

                    b.Property<int>("FkIdProduct")
                        .HasColumnType("int")
                        .HasColumnName("fkIdProduct");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdOrder" }, "FK_ordeDetOrder");

                    b.HasIndex(new[] { "FkIdProduct" }, "FK_ordeDetProd");

                    b.ToTable("orderdetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Orderstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.ToTable("orderstatus", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Paymenttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name1");

                    b.ToTable("paymenttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Gendertype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gendertype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Prodcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("prodcategory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Prodcolor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("prodcolor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdColor")
                        .HasColumnType("int")
                        .HasColumnName("fkIdColor");

                    b.Property<int>("FkIdOrderDetail")
                        .HasColumnType("int")
                        .HasColumnName("fkIdOrderDetail");

                    b.Property<int>("FkIdProdCategory")
                        .HasColumnType("int")
                        .HasColumnName("fkIdProdCategory");

                    b.Property<int>("FkIdtGenderType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdtGenderType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdColor" }, "FK_pordColor");

                    b.HasIndex(new[] { "FkIdProdCategory" }, "FK_prodCate");

                    b.HasIndex(new[] { "FkIdtGenderType" }, "FK_prodGenderType");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Complement")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("complement");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<int>("FkIdAddressType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdAddressType");

                    b.Property<int>("IkIdCity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdAddressType" }, "FK_addressAddreType");

                    b.HasIndex(new[] { "IkIdCity" }, "FK_addressCity");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Addresstype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("addresstype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdDepartment")
                        .HasColumnType("int")
                        .HasColumnName("fkIdDepartment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdDepartment" }, "FK_deparCity");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name2");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FkIdCountry")
                        .HasColumnType("int")
                        .HasColumnName("fkIdCountry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdCountry" }, "FK_counDepar");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnName("age");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int>("FkIdAddress")
                        .HasColumnType("int")
                        .HasColumnName("fkIdAddress");

                    b.Property<int>("FkIdContact")
                        .HasColumnType("int")
                        .HasColumnName("fkIdContact");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdContact" }, "FK_clientContact");

                    b.HasIndex(new[] { "Code" }, "code")
                        .IsUnique();

                    b.HasIndex(new[] { "FkIdAddress" }, "fkIdAddress")
                        .IsUnique();

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdContactType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdContactType");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdContactType" }, "FK_contConType");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.Contacttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name3");

                    b.ToTable("contacttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<int>("FkIdUser")
                        .HasColumnType("int")
                        .HasColumnName("fkIdUser");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdUser" }, "FK_tokenUser");

                    b.HasIndex(new[] { "Code" }, "code")
                        .IsUnique()
                        .HasDatabaseName("code1");

                    b.ToTable("token", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<int?>("FkIdClient")
                        .HasColumnType("int")
                        .HasColumnName("fkIdClient");

                    b.Property<int>("FkIdRol")
                        .HasColumnType("int")
                        .HasColumnName("fkIdRol");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdClient" }, "FK_userClient");

                    b.HasIndex(new[] { "FkIdRol" }, "FK_userRol");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.Userrol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name4");

                    b.ToTable("userrol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Order", b =>
                {
                    b.HasOne("Domain.Entities.Person.Client", "FkIdClientNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkIdClient")
                        .IsRequired()
                        .HasConstraintName("FK_orderClient");

                    b.HasOne("Domain.Entities.BusinessMovements.Paymenttype", "FkIdPaymentTypeNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkIdPaymentType")
                        .IsRequired()
                        .HasConstraintName("FK_orderPayType");

                    b.HasOne("Domain.Entities.BusinessMovements.Orderstatus", "FkIdStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkIdStatus")
                        .IsRequired()
                        .HasConstraintName("FK_orderStatus");

                    b.Navigation("FkIdClientNavigation");

                    b.Navigation("FkIdPaymentTypeNavigation");

                    b.Navigation("FkIdStatusNavigation");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Orderdetail", b =>
                {
                    b.HasOne("Domain.Entities.BusinessMovements.Order", "FkIdOrderNavigation")
                        .WithMany("Orderdetails")
                        .HasForeignKey("FkIdOrder")
                        .IsRequired()
                        .HasConstraintName("FK_ordeDetOrder");

                    b.HasOne("Domain.Entities.Inventory.Product", "FkIdProductNavigation")
                        .WithMany("Orderdetails")
                        .HasForeignKey("FkIdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ordeDetProd");

                    b.Navigation("FkIdOrderNavigation");

                    b.Navigation("FkIdProductNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Product", b =>
                {
                    b.HasOne("Domain.Entities.Inventory.Prodcolor", "FkIdColorNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkIdColor")
                        .IsRequired()
                        .HasConstraintName("FK_pordColor");

                    b.HasOne("Domain.Entities.Inventory.Prodcategory", "FkIdProdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkIdProdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_prodCate");

                    b.HasOne("Domain.Entities.Inventory.Gendertype", "FkIdtGenderTypeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkIdtGenderType")
                        .IsRequired()
                        .HasConstraintName("FK_prodGenderType");

                    b.Navigation("FkIdColorNavigation");

                    b.Navigation("FkIdProdCategoryNavigation");

                    b.Navigation("FkIdtGenderTypeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Location.Address", b =>
                {
                    b.HasOne("Domain.Entities.Location.Addresstype", "FkIdAddressTypeNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("FkIdAddressType")
                        .IsRequired()
                        .HasConstraintName("FK_addressAddreType");

                    b.HasOne("Domain.Entities.Location.City", "IkIdCityNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IkIdCity")
                        .IsRequired()
                        .HasConstraintName("FK_addressCity");

                    b.Navigation("FkIdAddressTypeNavigation");

                    b.Navigation("IkIdCityNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Domain.Entities.Location.Department", "FkIdDepartmentNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("FkIdDepartment")
                        .IsRequired()
                        .HasConstraintName("FK_deparCity");

                    b.Navigation("FkIdDepartmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.HasOne("Domain.Entities.Location.Country", "FkIdCountryNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("FkIdCountry")
                        .IsRequired()
                        .HasConstraintName("FK_counDepar");

                    b.Navigation("FkIdCountryNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Person.Client", b =>
                {
                    b.HasOne("Domain.Entities.Location.Address", "FkIdAddressNavigation")
                        .WithOne("Client")
                        .HasForeignKey("Domain.Entities.Person.Client", "FkIdAddress")
                        .IsRequired()
                        .HasConstraintName("FK_clientAddress");

                    b.HasOne("Domain.Entities.Person.Contact", "FkIdContactNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("FkIdContact")
                        .IsRequired()
                        .HasConstraintName("FK_clientContact");

                    b.Navigation("FkIdAddressNavigation");

                    b.Navigation("FkIdContactNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Person.Contact", b =>
                {
                    b.HasOne("Domain.Entities.Person.Contacttype", "FkIdContactTypeNavigation")
                        .WithMany("Contacts")
                        .HasForeignKey("FkIdContactType")
                        .IsRequired()
                        .HasConstraintName("FK_contConType");

                    b.Navigation("FkIdContactTypeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.Token", b =>
                {
                    b.HasOne("Domain.Entities.UserAuthenti.User", "FkIdUserNavigation")
                        .WithMany("Tokens")
                        .HasForeignKey("FkIdUser")
                        .IsRequired()
                        .HasConstraintName("FK_tokenUser");

                    b.Navigation("FkIdUserNavigation");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.User", b =>
                {
                    b.HasOne("Domain.Entities.Person.Client", "FkIdClientNavigation")
                        .WithMany("Users")
                        .HasForeignKey("FkIdClient")
                        .HasConstraintName("FK_userClient");

                    b.HasOne("Domain.Entities.UserAuthenti.Userrol", "FkIdRolNavigation")
                        .WithMany("Users")
                        .HasForeignKey("FkIdRol")
                        .IsRequired()
                        .HasConstraintName("FK_userRol");

                    b.Navigation("FkIdClientNavigation");

                    b.Navigation("FkIdRolNavigation");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Order", b =>
                {
                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Orderstatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMovements.Paymenttype", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Gendertype", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Prodcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Prodcolor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Product", b =>
                {
                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("Domain.Entities.Location.Address", b =>
                {
                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.Location.Addresstype", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Person.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Person.Contact", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Entities.Person.Contacttype", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.User", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthenti.Userrol", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
